
optimizations:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 2f 00 00 	mov    0x2fd9(%rip),%rax        # 3fe8 <__gmon_start__@Base>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	ret

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 92 2f 00 00    	push   0x2f92(%rip)        # 3fb8 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	ff 25 94 2f 00 00    	jmp    *0x2f94(%rip)        # 3fc0 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:	0f 1f 40 00          	nopl   0x0(%rax)
    1030:	f3 0f 1e fa          	endbr64
    1034:	68 00 00 00 00       	push   $0x0
    1039:	e9 e2 ff ff ff       	jmp    1020 <_init+0x20>
    103e:	66 90                	xchg   %ax,%ax
    1040:	f3 0f 1e fa          	endbr64
    1044:	68 01 00 00 00       	push   $0x1
    1049:	e9 d2 ff ff ff       	jmp    1020 <_init+0x20>
    104e:	66 90                	xchg   %ax,%ax

Disassembly of section .plt.got:

0000000000001050 <__cxa_finalize@plt>:
    1050:	f3 0f 1e fa          	endbr64
    1054:	ff 25 9e 2f 00 00    	jmp    *0x2f9e(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    105a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

0000000000001060 <clock@plt>:
    1060:	f3 0f 1e fa          	endbr64
    1064:	ff 25 5e 2f 00 00    	jmp    *0x2f5e(%rip)        # 3fc8 <clock@GLIBC_2.2.5>
    106a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001070 <__printf_chk@plt>:
    1070:	f3 0f 1e fa          	endbr64
    1074:	ff 25 56 2f 00 00    	jmp    *0x2f56(%rip)        # 3fd0 <__printf_chk@GLIBC_2.3.4>
    107a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

Disassembly of section .text:

0000000000001080 <main>:
    1080:	f3 0f 1e fa          	endbr64
    1084:	53                   	push   %rbx
    1085:	e8 d6 ff ff ff       	call   1060 <clock@plt>
    108a:	bf 19 00 00 00       	mov    $0x19,%edi
    108f:	48 89 c3             	mov    %rax,%rbx
    1092:	e8 32 01 00 00       	call   11c9 <fibonacci>
    1097:	ba 19 00 00 00       	mov    $0x19,%edx
    109c:	bf 02 00 00 00       	mov    $0x2,%edi
    10a1:	48 8d 35 7f 0f 00 00 	lea    0xf7f(%rip),%rsi        # 2027 <_IO_stdin_used+0x27>
    10a8:	89 c1                	mov    %eax,%ecx
    10aa:	31 c0                	xor    %eax,%eax
    10ac:	e8 bf ff ff ff       	call   1070 <__printf_chk@plt>
    10b1:	e8 aa ff ff ff       	call   1060 <clock@plt>
    10b6:	48 8d 35 78 0f 00 00 	lea    0xf78(%rip),%rsi        # 2035 <_IO_stdin_used+0x35>
    10bd:	bf 02 00 00 00       	mov    $0x2,%edi
    10c2:	48 29 d8             	sub    %rbx,%rax
    10c5:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    10ca:	b0 02                	mov    $0x2,%al
    10cc:	0f 28 c8             	movaps %xmm0,%xmm1
    10cf:	f2 0f 5e 0d 99 0f 00 	divsd  0xf99(%rip),%xmm1        # 2070 <_IO_stdin_used+0x70>
    10d6:	00 
    10d7:	e8 94 ff ff ff       	call   1070 <__printf_chk@plt>
    10dc:	31 c0                	xor    %eax,%eax
    10de:	5b                   	pop    %rbx
    10df:	c3                   	ret

00000000000010e0 <_start>:
    10e0:	f3 0f 1e fa          	endbr64
    10e4:	31 ed                	xor    %ebp,%ebp
    10e6:	49 89 d1             	mov    %rdx,%r9
    10e9:	5e                   	pop    %rsi
    10ea:	48 89 e2             	mov    %rsp,%rdx
    10ed:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    10f1:	50                   	push   %rax
    10f2:	54                   	push   %rsp
    10f3:	45 31 c0             	xor    %r8d,%r8d
    10f6:	31 c9                	xor    %ecx,%ecx
    10f8:	48 8d 3d 81 ff ff ff 	lea    -0x7f(%rip),%rdi        # 1080 <main>
    10ff:	ff 15 d3 2e 00 00    	call   *0x2ed3(%rip)        # 3fd8 <__libc_start_main@GLIBC_2.34>
    1105:	f4                   	hlt
    1106:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    110d:	00 00 00 

0000000000001110 <deregister_tm_clones>:
    1110:	48 8d 3d f9 2e 00 00 	lea    0x2ef9(%rip),%rdi        # 4010 <__TMC_END__>
    1117:	48 8d 05 f2 2e 00 00 	lea    0x2ef2(%rip),%rax        # 4010 <__TMC_END__>
    111e:	48 39 f8             	cmp    %rdi,%rax
    1121:	74 15                	je     1138 <deregister_tm_clones+0x28>
    1123:	48 8b 05 b6 2e 00 00 	mov    0x2eb6(%rip),%rax        # 3fe0 <_ITM_deregisterTMCloneTable@Base>
    112a:	48 85 c0             	test   %rax,%rax
    112d:	74 09                	je     1138 <deregister_tm_clones+0x28>
    112f:	ff e0                	jmp    *%rax
    1131:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1138:	c3                   	ret
    1139:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001140 <register_tm_clones>:
    1140:	48 8d 3d c9 2e 00 00 	lea    0x2ec9(%rip),%rdi        # 4010 <__TMC_END__>
    1147:	48 8d 35 c2 2e 00 00 	lea    0x2ec2(%rip),%rsi        # 4010 <__TMC_END__>
    114e:	48 29 fe             	sub    %rdi,%rsi
    1151:	48 89 f0             	mov    %rsi,%rax
    1154:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1158:	48 c1 f8 03          	sar    $0x3,%rax
    115c:	48 01 c6             	add    %rax,%rsi
    115f:	48 d1 fe             	sar    $1,%rsi
    1162:	74 14                	je     1178 <register_tm_clones+0x38>
    1164:	48 8b 05 85 2e 00 00 	mov    0x2e85(%rip),%rax        # 3ff0 <_ITM_registerTMCloneTable@Base>
    116b:	48 85 c0             	test   %rax,%rax
    116e:	74 08                	je     1178 <register_tm_clones+0x38>
    1170:	ff e0                	jmp    *%rax
    1172:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1178:	c3                   	ret
    1179:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001180 <__do_global_dtors_aux>:
    1180:	f3 0f 1e fa          	endbr64
    1184:	80 3d 85 2e 00 00 00 	cmpb   $0x0,0x2e85(%rip)        # 4010 <__TMC_END__>
    118b:	75 2b                	jne    11b8 <__do_global_dtors_aux+0x38>
    118d:	55                   	push   %rbp
    118e:	48 83 3d 62 2e 00 00 	cmpq   $0x0,0x2e62(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1195:	00 
    1196:	48 89 e5             	mov    %rsp,%rbp
    1199:	74 0c                	je     11a7 <__do_global_dtors_aux+0x27>
    119b:	48 8b 3d 66 2e 00 00 	mov    0x2e66(%rip),%rdi        # 4008 <__dso_handle>
    11a2:	e8 a9 fe ff ff       	call   1050 <__cxa_finalize@plt>
    11a7:	e8 64 ff ff ff       	call   1110 <deregister_tm_clones>
    11ac:	c6 05 5d 2e 00 00 01 	movb   $0x1,0x2e5d(%rip)        # 4010 <__TMC_END__>
    11b3:	5d                   	pop    %rbp
    11b4:	c3                   	ret
    11b5:	0f 1f 00             	nopl   (%rax)
    11b8:	c3                   	ret
    11b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000011c0 <frame_dummy>:
    11c0:	f3 0f 1e fa          	endbr64
    11c4:	e9 77 ff ff ff       	jmp    1140 <register_tm_clones>

00000000000011c9 <fibonacci>:
    11c9:	f3 0f 1e fa          	endbr64
    11cd:	41 54                	push   %r12
    11cf:	4c 8d 25 2e 0e 00 00 	lea    0xe2e(%rip),%r12        # 2004 <_IO_stdin_used+0x4>
    11d6:	55                   	push   %rbp
    11d7:	31 ed                	xor    %ebp,%ebp
    11d9:	53                   	push   %rbx
    11da:	89 fb                	mov    %edi,%ebx
    11dc:	31 c0                	xor    %eax,%eax
    11de:	e8 2f 00 00 00       	call   1212 <helper_func>
    11e3:	89 d9                	mov    %ebx,%ecx
    11e5:	4c 89 e6             	mov    %r12,%rsi
    11e8:	bf 02 00 00 00       	mov    $0x2,%edi
    11ed:	89 c2                	mov    %eax,%edx
    11ef:	31 c0                	xor    %eax,%eax
    11f1:	e8 7a fe ff ff       	call   1070 <__printf_chk@plt>
    11f6:	83 fb 01             	cmp    $0x1,%ebx
    11f9:	7e 0f                	jle    120a <fibonacci+0x41>
    11fb:	8d 7b ff             	lea    -0x1(%rbx),%edi
    11fe:	83 eb 02             	sub    $0x2,%ebx
    1201:	e8 c3 ff ff ff       	call   11c9 <fibonacci>
    1206:	01 c5                	add    %eax,%ebp
    1208:	eb d2                	jmp    11dc <fibonacci+0x13>
    120a:	8d 04 2b             	lea    (%rbx,%rbp,1),%eax
    120d:	5b                   	pop    %rbx
    120e:	5d                   	pop    %rbp
    120f:	41 5c                	pop    %r12
    1211:	c3                   	ret

0000000000001212 <helper_func>:
    1212:	f3 0f 1e fa          	endbr64
    1216:	b8 d5 00 00 00       	mov    $0xd5,%eax
    121b:	c3                   	ret

Disassembly of section .fini:

000000000000121c <_fini>:
    121c:	f3 0f 1e fa          	endbr64
    1220:	48 83 ec 08          	sub    $0x8,%rsp
    1224:	48 83 c4 08          	add    $0x8,%rsp
    1228:	c3                   	ret
